# Wallet Video Call App Environment Variables
# Copy these to your .env.local file

# Base MiniApp Configuration
NEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME="Wallet Video Calls"

# App URLs
NEXT_PUBLIC_ICON_URL="https://web3-onboarder-demo.vercel.app/icon.png"
NEXT_PUBLIC_HOME_URL="https://web3-onboarder-demo.vercel.app"
NEXT_PUBLIC_WEBHOOK_URL="https://web3-onboarder-demo.vercel.app/api/webhooks/stream-transcription"

# Additional App Assets
NEXT_PUBLIC_APP_HERO_IMAGE="https://web3-onboarder-demo.vercel.app/hero.png"
NEXT_PUBLIC_SPLASH_IMAGE="https://web3-onboarder-demo.vercel.app/splash.png"
NEXT_PUBLIC_SPLASH_BACKGROUND_COLOR="#4f46e5"

# OnchainKit Configuration (REQUIRED for wallet connection)
NEXT_PUBLIC_ONCHAINKIT_API_KEY=""

# GetStream.io Configuration (REQUIRED for video calls)
NEXT_PUBLIC_STREAM_API_KEY=""

# Base URL for the application
NEXT_PUBLIC_URL="https://web3-onboarder-demo.vercel.app"

# Instructions:
# 1. Create a .env.local file in your project root
# 2. Copy the above variables to your .env.local file
# 3. Get your OnchainKit API key from https://portal.cdp.coinbase.com/
# 4. Get your GetStream.io API key from https://getstream.io/dashboard/
# 5. Replace URLs with your actual deployment URLs
# 6. Delete this file after copying the variables

# How the Wallet-to-Wallet Calling Works:
# 1. User connects wallet → Gets wallet address as unique ID
# 2. User enters target wallet address → Creates call between the two addresses
# 3. Both users need the app open to make/receive calls
# 4. Call ID is generated from both wallet addresses (sorted for consistency)
# 5. Direct peer-to-peer video calling using GetStream.io infrastructure

# GetStream.io Setup:
# 1. Sign up at https://getstream.io/
# 2. Create a new video app
# 3. Copy your API key to NEXT_PUBLIC_STREAM_API_KEY
# 4. In production, implement proper token generation on your backend

# OnchainKit Setup:
# 1. Sign up at https://portal.cdp.coinbase.com/
# 2. Create a new project
# 3. Copy your API key to NEXT_PUBLIC_ONCHAINKIT_API_KEY
